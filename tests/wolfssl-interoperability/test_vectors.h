/* test_vectors.h - test vectors for interoperability tests
 *
 * Copyright (C) 2006-2025 wolfSSL Inc.
 *
 * This file is part of wolfPKCS11.
 *
 * wolfPKCS11 is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * wolfPKCS11 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
 */
#ifndef INTEROP_TEST_VECTORS_H
#define INTEROP_TEST_VECTORS_H

#include <stddef.h>
#include <stdint.h>

#ifndef HAVE_ECC
#define HAVE_ECC
#define INTEROP_DEFINED_ECC 1
#endif
#include <wolfssl/certs_test.h>
#ifdef INTEROP_DEFINED_ECC
#undef HAVE_ECC
#undef INTEROP_DEFINED_ECC
#endif

/* AES-GCM Known Answer Test (NIST SP 800-38D, Test Case 2) */
static const uint8_t aes_gcm_key[16] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t aes_gcm_iv[12] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t aes_gcm_plain[16] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static const uint8_t aes_gcm_aad[0] = { };
static const uint8_t aes_gcm_cipher[16] = {
    0x03, 0x88, 0xDA, 0xCE, 0x60, 0xB6, 0xA3, 0x92,
    0xF3, 0x28, 0xC2, 0xB9, 0x71, 0xB2, 0xFE, 0x78
};
static const uint8_t aes_gcm_tag[16] = {
    0xAB, 0x6E, 0x47, 0xD4, 0x2C, 0xEC, 0x13, 0xBD,
    0xF5, 0x3A, 0x67, 0xB2, 0x12, 0x57, 0xBD, 0xDF
};

/* AES-CBC KAT (NIST SP 800-38A F.2.1, AES-128) */
static const uint8_t aes_cbc_key[16] = {
    0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
    0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
};
static const uint8_t aes_cbc_iv[16] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};
static const uint8_t aes_cbc_plain[16] = {
    0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
    0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A
};
static const uint8_t aes_cbc_cipher[16] = {
    0x76, 0x49, 0xAB, 0xAC, 0x81, 0x19, 0xB2, 0x46,
    0xCE, 0xE9, 0x8E, 0x9B, 0x12, 0xE9, 0x19, 0x7D
};

/* AES-CBC KAT (NIST SP 800-38A F.2.5, AES-256) */
static const uint8_t aes_cbc256_key[32] = {
    0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,
    0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
    0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,
    0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
};
static const uint8_t aes_cbc256_iv[16] = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};
static const uint8_t aes_cbc256_cipher[16] = {
    0xF5, 0x8C, 0x4C, 0x04, 0xD6, 0xE5, 0xF1, 0xBA,
    0x77, 0x9E, 0xAB, 0xFB, 0x5F, 0x7B, 0xFB, 0xD6
};

/* AES-CTR KAT (NIST SP 800-38A F.5.1, AES-128) */
static const uint8_t aes_ctr_key[16] = {
    0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
    0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C
};
static const uint8_t aes_ctr_iv[16] = {
    0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
    0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
};
static const uint8_t aes_ctr_plain[16] = {
    0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
    0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A
};
static const uint8_t aes_ctr_cipher[16] = {
    0x87, 0x4D, 0x61, 0x91, 0xB6, 0x20, 0xE3, 0x26,
    0x1B, 0xEF, 0x68, 0x64, 0x99, 0x0D, 0xB6, 0xCE
};

/* AES-CTR KAT (NIST SP 800-38A F.5.5, AES-256) */
static const uint8_t aes_ctr256_key[32] = {
    0x60, 0x3D, 0xEB, 0x10, 0x15, 0xCA, 0x71, 0xBE,
    0x2B, 0x73, 0xAE, 0xF0, 0x85, 0x7D, 0x77, 0x81,
    0x1F, 0x35, 0x2C, 0x07, 0x3B, 0x61, 0x08, 0xD7,
    0x2D, 0x98, 0x10, 0xA3, 0x09, 0x14, 0xDF, 0xF4
};
static const uint8_t aes_ctr256_iv[16] = {
    0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
    0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
};
static const uint8_t aes_ctr256_cipher[16] = {
    0x60, 0x1E, 0xC3, 0x13, 0x77, 0x57, 0x89, 0xA5,
    0xB7, 0xA7, 0xF5, 0x04, 0xBB, 0xF3, 0xD2, 0x28
};

/* AES-XTS KAT (wolfCrypt test vector) */
static const uint8_t aes_xts_key[32] = {
    0x39, 0x25, 0x79, 0x05, 0xDF, 0xCC, 0x77, 0x76,
    0x6C, 0x87, 0x0A, 0x80, 0x6A, 0x60, 0xE3, 0xC0,
    0x93, 0xD1, 0x2A, 0xCF, 0xCB, 0x51, 0x42, 0xFA,
    0x09, 0x69, 0x89, 0x62, 0x5B, 0x60, 0xDB, 0x16
};
static const uint8_t aes_xts_tweak[16] = {
    0x5C, 0xF7, 0x9D, 0xB6, 0xC5, 0xCD, 0x99, 0x1A,
    0x1C, 0x78, 0x81, 0x42, 0x24, 0x95, 0x1E, 0x84
};
static const uint8_t aes_xts_plain[32] = {
    0xBD, 0xC5, 0x46, 0x8F, 0xBC, 0x8D, 0x50, 0xA1,
    0x0D, 0x1C, 0x85, 0x7F, 0x79, 0x1C, 0x5C, 0xBA,
    0xB3, 0x81, 0x0D, 0x0D, 0x73, 0xCF, 0x8F, 0x20,
    0x46, 0xB1, 0xD1, 0x9E, 0x7D, 0x5D, 0x8A, 0x56
};
static const uint8_t aes_xts_cipher[32] = {
    0xD6, 0xBE, 0x04, 0x6D, 0x41, 0xF2, 0x3B, 0x5E,
    0xD7, 0x0B, 0x6B, 0x3D, 0x5C, 0x8E, 0x66, 0x23,
    0x2B, 0xE6, 0xB8, 0x07, 0xD4, 0xDC, 0xC6, 0x0E,
    0xFF, 0x8D, 0xBC, 0x1D, 0x9F, 0x7F, 0xC8, 0x22
};

/* HMAC-SHA256 Known Answer Test (RFC 4231 Test Case 1) */
static const uint8_t hmac_key[20] = {
    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
    0x0B, 0x0B, 0x0B, 0x0B
};
static const uint8_t hmac_msg[] = {
    'H', 'i', ' ', 'T', 'h', 'e', 'r', 'e'
};
static const uint8_t hmac_digest[32] = {
    0xB0, 0x34, 0x4C, 0x61, 0xD8, 0xDB, 0x38, 0x53,
    0x5C, 0xA8, 0xAF, 0xCE, 0xAF, 0x0B, 0xF1, 0x2B,
    0x88, 0x1D, 0xC2, 0x00, 0xC9, 0x83, 0x3D, 0xA7,
    0x26, 0xE9, 0x37, 0x6C, 0x2E, 0x32, 0xCF, 0xF7
};

/* SHA-known answer test message */
static const uint8_t sha_test_msg[] = { 'a', 'b', 'c' };

static const uint8_t sha224_expected[] = {
    0x23, 0x09, 0x7D, 0x22, 0x34, 0x05, 0xD8, 0x22,
    0x86, 0x42, 0xA4, 0x77, 0xBD, 0xA2, 0x55, 0xB3,
    0x2A, 0xAD, 0xBC, 0xE4, 0xBD, 0xA0, 0xB3, 0xF7,
    0xE3, 0x6C, 0x9D, 0xA7
};

static const uint8_t sha256_expected[] = {
    0xBA, 0x78, 0x16, 0xBF, 0x8F, 0x01, 0xCF, 0xEA,
    0x41, 0x41, 0x40, 0xDE, 0x5D, 0xAE, 0x22, 0x23,
    0xB0, 0x03, 0x61, 0xA3, 0x96, 0x17, 0x7A, 0x9C,
    0xB4, 0x10, 0xFF, 0x61, 0xF2, 0x00, 0x15, 0xAD
};

static const uint8_t sha384_expected[] = {
    0xCB, 0x00, 0x75, 0x3F, 0x45, 0xA3, 0x5E, 0x8B,
    0xB5, 0xA0, 0x3D, 0x69, 0x9A, 0xC6, 0x50, 0x07,
    0x27, 0x2C, 0x32, 0xAB, 0x0E, 0xDE, 0xD1, 0x63,
    0x1A, 0x8B, 0x60, 0x5A, 0x43, 0xFF, 0x5B, 0xED,
    0x80, 0x86, 0x07, 0x2B, 0xA1, 0xE7, 0xCC, 0x23,
    0x58, 0xBA, 0xEC, 0xA1, 0x34, 0xC8, 0x25, 0xA7
};

static const uint8_t sha512_expected[] = {
    0xDD, 0xAF, 0x35, 0xA1, 0x93, 0x61, 0x7A, 0xBA,
    0xCC, 0x41, 0x73, 0x49, 0xAE, 0x20, 0x41, 0x31,
    0x12, 0xE6, 0xFA, 0x4E, 0x89, 0xA9, 0x7E, 0xA2,
    0x0A, 0x9E, 0xEE, 0xE6, 0x4B, 0x55, 0xD3, 0x9A,
    0x21, 0x92, 0x99, 0x2A, 0x27, 0x4F, 0xC1, 0xA8,
    0x36, 0xBA, 0x3C, 0x23, 0xA3, 0xFE, 0xEB, 0xBD,
    0x45, 0x4D, 0x44, 0x23, 0x64, 0x3C, 0xE8, 0x0E,
    0x2A, 0x9A, 0xC9, 0x4F, 0xA5, 0x4C, 0xA4, 0x9F
};

#ifdef WOLFSSL_SHA3
static const uint8_t sha3_256_expected[] = {
    0x3A, 0x98, 0x5D, 0xA7, 0x4F, 0xE2, 0x25, 0xB2,
    0x04, 0x5C, 0x17, 0x2D, 0x6B, 0xD3, 0x90, 0xBD,
    0x85, 0x5F, 0x08, 0x6E, 0x3E, 0x9D, 0x52, 0x5B,
    0x46, 0xBF, 0xE2, 0x45, 0x11, 0x43, 0x15, 0x32
};
#endif /* WOLFSSL_SHA3 */

/* RSA-2048 test key material (from wolfPKCS11 test data) */
#define rsa_2048_priv_der        client_key_der_2048
#define rsa_2048_priv_der_len    sizeof_client_key_der_2048
#define rsa_2048_pub_der         client_keypub_der_2048
#define rsa_2048_pub_der_len     sizeof_client_keypub_der_2048

static const uint8_t rsa_2048_modulus[] = {
    0xC3, 0x03, 0xD1, 0x2B, 0xFE, 0x39, 0xA4, 0x32,
    0x45, 0x3B, 0x53, 0xC8, 0x84, 0x2B, 0x2A, 0x7C,
    0x74, 0x9A, 0xBD, 0xAA, 0x2A, 0x52, 0x07, 0x47,
    0xD6, 0xA6, 0x36, 0xB2, 0x07, 0x32, 0x8E, 0xD0,
    0xBA, 0x69, 0x7B, 0xC6, 0xC3, 0x44, 0x9E, 0xD4,
    0x81, 0x48, 0xFD, 0x2D, 0x68, 0xA2, 0x8B, 0x67,
    0xBB, 0xA1, 0x75, 0xC8, 0x36, 0x2C, 0x4A, 0xD2,
    0x1B, 0xF7, 0x8B, 0xBA, 0xCF, 0x0D, 0xF9, 0xEF,
    0xEC, 0xF1, 0x81, 0x1E, 0x7B, 0x9B, 0x03, 0x47,
    0x9A, 0xBF, 0x65, 0xCC, 0x7F, 0x65, 0x24, 0x69,
    0xA6, 0xE8, 0x14, 0x89, 0x5B, 0xE4, 0x34, 0xF7,
    0xC5, 0xB0, 0x14, 0x93, 0xF5, 0x67, 0x7B, 0x3A,
    0x7A, 0x78, 0xE1, 0x01, 0x56, 0x56, 0x91, 0xA6,
    0x13, 0x42, 0x8D, 0xD2, 0x3C, 0x40, 0x9C, 0x4C,
    0xEF, 0xD1, 0x86, 0xDF, 0x37, 0x51, 0x1B, 0x0C,
    0xA1, 0x3B, 0xF5, 0xF1, 0xA3, 0x4A, 0x35, 0xE4,
    0xE1, 0xCE, 0x96, 0xDF, 0x1B, 0x7E, 0xBF, 0x4E,
    0x97, 0xD0, 0x10, 0xE8, 0xA8, 0x08, 0x30, 0x81,
    0xAF, 0x20, 0x0B, 0x43, 0x14, 0xC5, 0x74, 0x67,
    0xB4, 0x32, 0x82, 0x6F, 0x8D, 0x86, 0xC2, 0x88,
    0x40, 0x99, 0x36, 0x83, 0xBA, 0x1E, 0x40, 0x72,
    0x22, 0x17, 0xD7, 0x52, 0x65, 0x24, 0x73, 0xB0,
    0xCE, 0xEF, 0x19, 0xCD, 0xAE, 0xFF, 0x78, 0x6C,
    0x7B, 0xC0, 0x12, 0x03, 0xD4, 0x4E, 0x72, 0x0D,
    0x50, 0x6D, 0x3B, 0xA3, 0x3B, 0xA3, 0x99, 0x5E,
    0x9D, 0xC8, 0xD9, 0x0C, 0x85, 0xB3, 0xD9, 0x8A,
    0xD9, 0x54, 0x26, 0xDB, 0x6D, 0xFA, 0xAC, 0xBB,
    0xFF, 0x25, 0x4C, 0xC4, 0xD1, 0x79, 0xF4, 0x71,
    0xD3, 0x86, 0x40, 0x18, 0x13, 0xB0, 0x63, 0xB5,
    0x72, 0x4E, 0x30, 0xC4, 0x97, 0x84, 0x86, 0x2D,
    0x56, 0x2F, 0xD7, 0x15, 0xF7, 0x7F, 0xC0, 0xAE,
    0xF5, 0xFC, 0x5B, 0xE5, 0xFB, 0xA1, 0xBA, 0xD3
};
static const uint8_t rsa_2048_pub_exp[] = { 0x01, 0x00, 0x01 };
static const uint8_t rsa_2048_priv_exp[] = {
    0xA2, 0xE6, 0xD8, 0x5F, 0x10, 0x71, 0x64, 0x08,
    0x9E, 0x2E, 0x6D, 0xD1, 0x6D, 0x1E, 0x85, 0xD2,
    0x0A, 0xB1, 0x8C, 0x47, 0xCE, 0x2C, 0x51, 0x6A,
    0xA0, 0x12, 0x9E, 0x53, 0xDE, 0x91, 0x4C, 0x1D,
    0x6D, 0xEA, 0x59, 0x7B, 0xF2, 0x77, 0xAA, 0xD9,
    0xC6, 0xD9, 0x8A, 0xAB, 0xD8, 0xE1, 0x16, 0xE4,
    0x63, 0x26, 0xFF, 0xB5, 0x6C, 0x13, 0x59, 0xB8,
    0xE3, 0xA5, 0xC8, 0x72, 0x17, 0x2E, 0x0C, 0x9F,
    0x6F, 0xE5, 0x59, 0x3F, 0x76, 0x6F, 0x49, 0xB1,
    0x11, 0xC2, 0x5A, 0x2E, 0x16, 0x29, 0x0D, 0xDE,
    0xB7, 0x8E, 0xDC, 0x40, 0xD5, 0xA2, 0xEE, 0xE0,
    0x1E, 0xA1, 0xF4, 0xBE, 0x97, 0xDB, 0x86, 0x63,
    0x96, 0x14, 0xCD, 0x98, 0x09, 0x60, 0x2D, 0x30,
    0x76, 0x9C, 0x3C, 0xCD, 0xE6, 0x88, 0xEE, 0x47,
    0x92, 0x79, 0x0B, 0x5A, 0x00, 0xE2, 0x5E, 0x5F,
    0x11, 0x7C, 0x7D, 0xF9, 0x08, 0xB7, 0x20, 0x06,
    0x89, 0x2A, 0x5D, 0xFD, 0x00, 0xAB, 0x22, 0xE1,
    0xF0, 0xB3, 0xBC, 0x24, 0xA9, 0x5E, 0x26, 0x0E,
    0x1F, 0x00, 0x2D, 0xFE, 0x21, 0x9A, 0x53, 0x5B,
    0x6D, 0xD3, 0x2B, 0xAB, 0x94, 0x82, 0x68, 0x43,
    0x36, 0xD8, 0xF6, 0x2F, 0xC6, 0x22, 0xFC, 0xB5,
    0x41, 0x5D, 0x0D, 0x33, 0x60, 0xEA, 0xA4, 0x7D,
    0x7E, 0xE8, 0x4B, 0x55, 0x91, 0x56, 0xD3, 0x5C,
    0x57, 0x8F, 0x1F, 0x94, 0x17, 0x2F, 0xAA, 0xDE,
    0xE9, 0x9E, 0xA8, 0xF4, 0xCF, 0x8A, 0x4C, 0x8E,
    0xA0, 0xE4, 0x56, 0x73, 0xB2, 0xCF, 0x4F, 0x86,
    0xC5, 0x69, 0x3C, 0xF3, 0x24, 0x20, 0x8B, 0x5C,
    0x96, 0x0C, 0xFA, 0x6B, 0x12, 0x3B, 0x9A, 0x67,
    0xC1, 0xDF, 0xC6, 0x96, 0xB2, 0xA5, 0xD5, 0x92,
    0x0D, 0x9B, 0x09, 0x42, 0x68, 0x24, 0x10, 0x45,
    0xD4, 0x50, 0xE4, 0x17, 0x39, 0x48, 0xD0, 0x35,
    0x8B, 0x94, 0x6D, 0x11, 0xDE, 0x8F, 0xCA, 0x59
};
static const uint8_t rsa_2048_p[] = {
    0xEA, 0x24, 0xA7, 0xF9, 0x69, 0x33, 0xE9, 0x71,
    0xDC, 0x52, 0x7D, 0x88, 0x21, 0x28, 0x2F, 0x49,
    0xDE, 0xBA, 0x72, 0x16, 0xE9, 0xCC, 0x47, 0x7A,
    0x88, 0x0D, 0x94, 0x57, 0x84, 0x58, 0x16, 0x3A,
    0x81, 0xB0, 0x3F, 0xA2, 0xCF, 0xA6, 0x6C, 0x1E,
    0xB0, 0x06, 0x29, 0x00, 0x8F, 0xE7, 0x77, 0x76,
    0xAC, 0xDB, 0xCA, 0xC7, 0xD9, 0x5E, 0x9B, 0x3F,
    0x26, 0x90, 0x52, 0xAE, 0xFC, 0x38, 0x90, 0x00,
    0x14, 0xBB, 0xB4, 0x0F, 0x58, 0x94, 0xE7, 0x2F,
    0x6A, 0x7E, 0x1C, 0x4F, 0x41, 0x21, 0xD4, 0x31,
    0x59, 0x1F, 0x4E, 0x8A, 0x1A, 0x8D, 0xA7, 0x57,
    0x6C, 0x22, 0xD8, 0xE5, 0xF4, 0x7E, 0x32, 0xA6,
    0x10, 0xCB, 0x64, 0xA5, 0x55, 0x03, 0x87, 0xA6,
    0x27, 0x05, 0x8C, 0xC3, 0xD7, 0xB6, 0x27, 0xB2,
    0x4D, 0xBA, 0x30, 0xDA, 0x47, 0x8F, 0x54, 0xD3,
    0x3D, 0x8B, 0x84, 0x8D, 0x94, 0x98, 0x58, 0xA5
};
static const uint8_t rsa_2048_q[] = {
    0xD5, 0x38, 0x1B, 0xC3, 0x8F, 0xC5, 0x93, 0x0C,
    0x47, 0x0B, 0x6F, 0x35, 0x92, 0xC5, 0xB0, 0x8D,
    0x46, 0xC8, 0x92, 0x18, 0x8F, 0xF5, 0x80, 0x0A,
    0xF7, 0xEF, 0xA1, 0xFE, 0x80, 0xB9, 0xB5, 0x2A,
    0xBA, 0xCA, 0x18, 0xB0, 0x5D, 0xA5, 0x07, 0xD0,
    0x93, 0x8D, 0xD8, 0x9C, 0x04, 0x1C, 0xD4, 0x62,
    0x8E, 0xA6, 0x26, 0x81, 0x01, 0xFF, 0xCE, 0x8A,
    0x2A, 0x63, 0x34, 0x35, 0x40, 0xAA, 0x6D, 0x80,
    0xDE, 0x89, 0x23, 0x6A, 0x57, 0x4D, 0x9E, 0x6E,
    0xAD, 0x93, 0x4E, 0x56, 0x90, 0x0B, 0x6D, 0x9D,
    0x73, 0x8B, 0x0C, 0xAE, 0x27, 0x3D, 0xDE, 0x4E,
    0xF0, 0xAA, 0xC5, 0x6C, 0x78, 0x67, 0x6C, 0x94,
    0x52, 0x9C, 0x37, 0x67, 0x6C, 0x2D, 0xEF, 0xBB,
    0xAF, 0xDF, 0xA6, 0x90, 0x3C, 0xC4, 0x47, 0xCF,
    0x8D, 0x96, 0x9E, 0x98, 0xA9, 0xB4, 0x9F, 0xC5,
    0xA6, 0x50, 0xDC, 0xB3, 0xF0, 0xFB, 0x74, 0x17
};
static const uint8_t rsa_2048_dP[] = {
    0x5E, 0x83, 0x09, 0x62, 0xBD, 0xBA, 0x7C, 0xA2,
    0xBF, 0x42, 0x74, 0xF5, 0x7C, 0x1C, 0xD2, 0x69,
    0xC9, 0x04, 0x0D, 0x85, 0x7E, 0x3E, 0x3D, 0x24,
    0x12, 0xC3, 0x18, 0x7B, 0xF3, 0x29, 0xF3, 0x5F,
    0x0E, 0x76, 0x6C, 0x59, 0x75, 0xE4, 0x41, 0x84,
    0x69, 0x9D, 0x32, 0xF3, 0xCD, 0x22, 0xAB, 0xB0,
    0x35, 0xBA, 0x4A, 0xB2, 0x3C, 0xE5, 0xD9, 0x58,
    0xB6, 0x62, 0x4F, 0x5D, 0xDE, 0xE5, 0x9E, 0x0A,
    0xCA, 0x53, 0xB2, 0x2C, 0xF7, 0x9E, 0xB3, 0x6B,
    0x0A, 0x5B, 0x79, 0x65, 0xEC, 0x6E, 0x91, 0x4E,
    0x92, 0x20, 0xF6, 0xFC, 0xFC, 0x16, 0xED, 0xD3,
    0x76, 0x0C, 0xE2, 0xEC, 0x7F, 0xB2, 0x69, 0x13,
    0x6B, 0x78, 0x0E, 0x5A, 0x46, 0x64, 0xB4, 0x5E,
    0xB7, 0x25, 0xA0, 0x5A, 0x75, 0x3A, 0x4B, 0xEF,
    0xC7, 0x3C, 0x3E, 0xF7, 0xFD, 0x26, 0xB8, 0x20,
    0xC4, 0x99, 0x0A, 0x9A, 0x73, 0xBE, 0xC3, 0x19
};
static const uint8_t rsa_2048_dQ[] = {
    0xBA, 0x44, 0x93, 0x14, 0xAC, 0x34, 0x19, 0x3B,
    0x5F, 0x91, 0x60, 0xAC, 0xF7, 0xB4, 0xD6, 0x81,
    0x05, 0x36, 0x51, 0x53, 0x3D, 0xE8, 0x65, 0xDC,
    0xAF, 0x2E, 0xDC, 0x61, 0x3E, 0xC9, 0x7D, 0xB8,
    0x7F, 0x87, 0xF0, 0x3B, 0x9B, 0x03, 0x82, 0x29,
    0x37, 0xCE, 0x72, 0x4E, 0x11, 0xD5, 0xB1, 0xC1,
    0x0C, 0x07, 0xA0, 0x99, 0x91, 0x4A, 0x8D, 0x7F,
    0xEC, 0x79, 0xCF, 0xF1, 0x39, 0xB5, 0xE9, 0x85,
    0xEC, 0x62, 0xF7, 0xDA, 0x7D, 0xBC, 0x64, 0x4D,
    0x22, 0x3C, 0x0E, 0xF2, 0xD6, 0x51, 0xF5, 0x87,
    0xD8, 0x99, 0xC0, 0x11, 0x20, 0x5D, 0x0F, 0x29,
    0xFD, 0x5B, 0xE2, 0xAE, 0xD9, 0x1C, 0xD9, 0x21,
    0x56, 0x6D, 0xFC, 0x84, 0xD0, 0x5F, 0xED, 0x10,
    0x15, 0x1C, 0x18, 0x21, 0xE7, 0xC4, 0x3D, 0x4B,
    0xD7, 0xD0, 0x9E, 0x6A, 0x95, 0xCF, 0x22, 0xC9,
    0x03, 0x7B, 0x9E, 0xE3, 0x60, 0x01, 0xFC, 0x2F
};
static const uint8_t rsa_2048_u[] = {
    0x11, 0xD0, 0x4B, 0xCF, 0x1B, 0x67, 0xB9, 0x9F,
    0x10, 0x75, 0x47, 0x86, 0x65, 0xAE, 0x31, 0xC2,
    0xC6, 0x30, 0xAC, 0x59, 0x06, 0x50, 0xD9, 0x0F,
    0xB5, 0x70, 0x06, 0xF7, 0xF0, 0xD3, 0xC8, 0x62,
    0x7C, 0xA8, 0xDA, 0x6E, 0xF6, 0x21, 0x3F, 0xD3,
    0x7F, 0x5F, 0xEA, 0x8A, 0xAB, 0x3F, 0xD9, 0x2A,
    0x5E, 0xF3, 0x51, 0xD2, 0xC2, 0x30, 0x37, 0xE3,
    0x2D, 0xA3, 0x75, 0x0D, 0x1E, 0x4D, 0x21, 0x34,
    0xD5, 0x57, 0x70, 0x5C, 0x89, 0xBF, 0x72, 0xEC,
    0x4A, 0x6E, 0x68, 0xD5, 0xCD, 0x18, 0x74, 0x33,
    0x4E, 0x8C, 0x3A, 0x45, 0x8F, 0xE6, 0x96, 0x40,
    0xEB, 0x63, 0xF9, 0x19, 0x86, 0x3A, 0x51, 0xDD,
    0x89, 0x4B, 0xB0, 0xF3, 0xF9, 0x9F, 0x5D, 0x28,
    0x95, 0x38, 0xBE, 0x35, 0xAB, 0xCA, 0x5C, 0xE7,
    0x93, 0x53, 0x34, 0xA1, 0x45, 0x5D, 0x13, 0x39,
    0x65, 0x42, 0x46, 0xA1, 0x9F, 0xCD, 0xF5, 0xBF
};

#ifdef USE_CERT_BUFFERS_3072
#define rsa_3072_priv_der        client_key_der_3072
#define rsa_3072_priv_der_len    sizeof_client_key_der_3072
#define rsa_3072_pub_der         client_keypub_der_3072
#define rsa_3072_pub_der_len     sizeof_client_keypub_der_3072
#endif

#ifdef USE_CERT_BUFFERS_4096
#define rsa_4096_priv_der        client_key_der_4096
#define rsa_4096_priv_der_len    sizeof_client_key_der_4096
#define rsa_4096_pub_der         client_keypub_der_4096
#define rsa_4096_pub_der_len     sizeof_client_keypub_der_4096
#endif

#define ecc384_priv_der          ca_ecc_key_der_384
#define ecc384_priv_der_len      sizeof_ca_ecc_key_der_384

/* ecc_clikey_der_256 and ecc_clikeypub_der_256 provided by certs_test.h */
#endif /* INTEROP_TEST_VECTORS_H */
