#!/usr/bin/env python3

import subprocess
import sys
import os

def run_openssl_command(cmd):
    """Run an OpenSSL command and return the output"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode != 0:
            print(f"Error running command: {cmd}")
            print(f"Error: {result.stderr}")
            return None
        return result.stdout.strip()
    except Exception as e:
        print(f"Exception running command: {cmd}")
        print(f"Exception: {e}")
        return None

def hex_to_c_array(hex_string, array_name):
    """Convert hex string to C array format"""
    if not hex_string:
        return f"static unsigned char {array_name}[] = {{ 0x00 }};\n"

    # Remove any whitespace and ensure even length
    hex_string = hex_string.replace(' ', '').replace('\n', '').replace(':', '')
    if len(hex_string) % 2 != 0:
        hex_string = '0' + hex_string

    # Convert to C array format
    bytes_list = []
    for i in range(0, len(hex_string), 2):
        bytes_list.append(f"0x{hex_string[i:i+2].upper()}")

    # Format as C array with proper line wrapping
    result = f"static unsigned char {array_name}[] = {{\n"
    for i in range(0, len(bytes_list), 12):
        line = "    " + ", ".join(bytes_list[i:i+12])
        if i + 12 < len(bytes_list):
            line += ","
        result += line + "\n"
    result += "};\n\n"

    return result

def extract_rsa_components(key_file, key_num):
    """Extract RSA key components from a PEM file"""
    components = {}

    # Get the key in text format
    text_output = run_openssl_command(f"openssl rsa -in {key_file} -text -noout")
    if not text_output:
        return None

    # Extract modulus
    modulus = run_openssl_command(f"openssl rsa -in {key_file} -noout -modulus")
    if modulus and modulus.startswith("Modulus="):
        components['modulus'] = modulus[8:]  # Remove "Modulus=" prefix

    # Parse the text output for other components
    lines = text_output.split('\n')
    current_component = None
    current_hex = ""

    for line in lines:
        line = line.strip()

        if line.startswith("privateExponent:"):
            if current_component:
                components[current_component] = current_hex.replace(' ', '').replace(':', '')
            current_component = 'private_exponent'
            current_hex = ""
        elif line.startswith("prime1:"):
            if current_component:
                components[current_component] = current_hex.replace(' ', '').replace(':', '')
            current_component = 'prime1'
            current_hex = ""
        elif line.startswith("prime2:"):
            if current_component:
                components[current_component] = current_hex.replace(' ', '').replace(':', '')
            current_component = 'prime2'
            current_hex = ""
        elif line.startswith("exponent1:"):
            if current_component:
                components[current_component] = current_hex.replace(' ', '').replace(':', '')
            current_component = 'exponent1'
            current_hex = ""
        elif line.startswith("exponent2:"):
            if current_component:
                components[current_component] = current_hex.replace(' ', '').replace(':', '')
            current_component = 'exponent2'
            current_hex = ""
        elif line.startswith("coefficient:"):
            if current_component:
                components[current_component] = current_hex.replace(' ', '').replace(':', '')
            current_component = 'coefficient'
            current_hex = ""
        elif current_component and ':' in line:
            # This is hex data for the current component
            current_hex += line.replace(' ', '').replace(':', '')

    # Don't forget the last component
    if current_component:
        components[current_component] = current_hex.replace(' ', '').replace(':', '')

    return components

def extract_certificate_der(cert_file):
    """Extract certificate in DER format as hex string"""
    # Convert binary DER to hex using xxd
    hex_output = run_openssl_command(f"openssl x509 -in {cert_file} -outform DER | xxd -p")
    if hex_output:
        return hex_output.replace('\n', '').replace(' ', '')

    return None

def main():
    output_file = "tpm_memory_test_data.h"

    with open(output_file, 'w') as f:
        f.write("/* tmp_memory_test_data.h - Generated RSA keys and certificates for TPM memory test\n")
        f.write(" * Generated by extract_key_data.py\n")
        f.write(" */\n\n")
        f.write("#ifndef TPM_MEMORY_TEST_DATA_H\n")
        f.write("#define TPM_MEMORY_TEST_DATA_H\n\n")

        for i in range(1, 11):
            print(f"Processing key and certificate {i}...")

            key_file = f"test_keys/rsa_key_{i}.pem"
            cert_file = f"test_keys/cert_{i}.pem"

            if not os.path.exists(key_file):
                print(f"Key file {key_file} not found!")
                continue

            if not os.path.exists(cert_file):
                print(f"Certificate file {cert_file} not found!")
                continue

            # Extract RSA components
            components = extract_rsa_components(key_file, i)
            if not components:
                print(f"Failed to extract components from {key_file}")
                continue

            # Write RSA key components
            if 'modulus' in components:
                f.write(hex_to_c_array(components['modulus'], f"rsa_{i}_modulus"))

            # Standard public exponent (65537)
            f.write(f"static unsigned char rsa_{i}_pub_exp[] = {{\n")
            f.write(f"    0x01, 0x00, 0x01\n")
            f.write(f"}};\n\n")

            if 'private_exponent' in components:
                f.write(hex_to_c_array(components['private_exponent'], f"rsa_{i}_priv_exp"))

            if 'prime1' in components:
                f.write(hex_to_c_array(components['prime1'], f"rsa_{i}_p"))

            if 'prime2' in components:
                f.write(hex_to_c_array(components['prime2'], f"rsa_{i}_q"))

            if 'exponent1' in components:
                f.write(hex_to_c_array(components['exponent1'], f"rsa_{i}_dP"))

            if 'exponent2' in components:
                f.write(hex_to_c_array(components['exponent2'], f"rsa_{i}_dQ"))

            if 'coefficient' in components:
                f.write(hex_to_c_array(components['coefficient'], f"rsa_{i}_u"))

            # Extract certificate DER data
            cert_der = extract_certificate_der(cert_file)
            if cert_der:
                f.write(hex_to_c_array(cert_der, f"cert_{i}_der"))
            else:
                print(f"Failed to extract certificate DER from {cert_file}")

        f.write("#endif /* TPM_MEMORY_TEST_DATA_H */\n")

    print(f"Key data extraction completed. Output written to {output_file}")

if __name__ == "__main__":
    main()
